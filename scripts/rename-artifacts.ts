#!/usr/bin/env tsx

import * as fs from 'fs'
import * as path from 'path'

/**
 * 构建产物重命名脚本 / Build Artifacts Renaming Script
 *
 * 该脚本用于将 Electron Builder 生成的默认文件名重命名为符合项目要求的格式
 * This script renames the default filenames generated by Electron Builder to match project requirements
 */

interface RenameRule {
  pattern: RegExp
  replacement: string
  description: string
}

// 获取当前版本号 / Get current version
function getVersion(): string {
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'))
  return packageJson.version
}

// 获取构建产物目录 / Get build artifacts directory
function getDistDir(): string {
  return path.join(process.cwd(), 'dist')
}

// 定义重命名规则 / Define renaming rules
function getRenameRules(version: string): RenameRule[] {
  return [
    // Windows x64
    {
      pattern: /^echolab-.*-x64-setup\.exe$/,
      replacement: `echolab-${version}-x64-setup.exe`,
      description: 'Windows x64 installer'
    },
    // Windows ARM64
    {
      pattern: /^echolab-.*-arm64-setup\.exe$/,
      replacement: `echolab-${version}-arm64-setup.exe`,
      description: 'Windows ARM64 installer'
    },
    // macOS Intel (x64)
    {
      pattern: /^echolab-.*-x64\.dmg$/,
      replacement: `echolab-${version}-intel.dmg`,
      description: 'macOS Intel DMG'
    },
    // macOS Apple Silicon (arm64)
    {
      pattern: /^echolab-.*-arm64\.dmg$/,
      replacement: `echolab-${version}-arm64.dmg`,
      description: 'macOS Apple Silicon DMG'
    },
    // Linux x64 DEB (x64 -> amd64)
    {
      pattern: /^echolab-.*-x64\.deb$/,
      replacement: `echolab-${version}-amd64.deb`,
      description: 'Linux AMD64 DEB package'
    },
    // Linux x64 AppImage (x64 -> amd64)
    {
      pattern: /^echolab-.*-x64\.AppImage$/,
      replacement: `echolab-${version}-amd64.appimage`,
      description: 'Linux AMD64 AppImage'
    }
  ]
}

// 重命名文件 / Rename file
function renameFile(oldPath: string, newPath: string, description: string): void {
  try {
    if (fs.existsSync(oldPath)) {
      fs.renameSync(oldPath, newPath)
      console.log(`✅ ${description}: ${path.basename(oldPath)} -> ${path.basename(newPath)}`)
    } else {
      console.log(`⚠️  File not found: ${path.basename(oldPath)}`)
    }
  } catch (error) {
    console.error(`❌ Failed to rename ${path.basename(oldPath)}:`, error)
  }
}

// 主函数 / Main function
function main(): void {
  console.log('🔄 Starting artifact renaming process...')
  console.log('开始构建产物重命名过程...\n')

  const version = getVersion()
  const distDir = getDistDir()

  console.log(`📦 Version: ${version}`)
  console.log(`📁 Distribution directory: ${distDir}\n`)

  if (!fs.existsSync(distDir)) {
    console.error(`❌ Distribution directory not found: ${distDir}`)
    console.error(`❌ 构建产物目录不存在: ${distDir}`)
    process.exit(1)
  }

  // 获取所有文件 / Get all files
  const files = fs.readdirSync(distDir)
  console.log('📋 Found files in dist directory:')
  console.log('在构建目录中找到的文件:')
  files.forEach((file) => console.log(`   - ${file}`))
  console.log()

  const renameRules = getRenameRules(version)
  let renamedCount = 0

  // 应用重命名规则 / Apply renaming rules
  for (const file of files) {
    const filePath = path.join(distDir, file)

    // 跳过目录 / Skip directories
    if (fs.statSync(filePath).isDirectory()) {
      continue
    }

    // 检查每个重命名规则 / Check each renaming rule
    for (const rule of renameRules) {
      if (rule.pattern.test(file)) {
        const newFileName = rule.replacement
        const newFilePath = path.join(distDir, newFileName)

        renameFile(filePath, newFilePath, rule.description)
        renamedCount++
        break // 找到匹配规则后跳出循环 / Break after finding a matching rule
      }
    }
  }

  console.log(`\n🎉 Renaming completed! ${renamedCount} files renamed.`)
  console.log(`🎉 重命名完成！已重命名 ${renamedCount} 个文件。`)

  // 显示最终文件列表 / Show final file list
  const finalFiles = fs
    .readdirSync(distDir)
    .filter((file) => fs.statSync(path.join(distDir, file)).isFile())

  console.log('\n📋 Final artifacts:')
  console.log('最终构建产物:')
  finalFiles.forEach((file) => console.log(`   - ${file}`))
}

// 运行脚本 / Run script
if (require.main === module) {
  main()
}

export { main as renameArtifacts }
