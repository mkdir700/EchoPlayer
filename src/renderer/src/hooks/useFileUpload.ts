import { useState, useCallback, useEffect } from 'react'
import { message } from 'antd'
import type { VideoFileState } from '../types'
import { isValidVideoFile, cleanupBlobUrl } from '../utils/helpers'
import { FileSystemHelper } from '../utils/fileSystemHelper'

export interface UseFileUploadReturn extends VideoFileState {
  handleVideoUpload: (file: File, resetVideoState?: () => void) => boolean
  handleVideoFileSelect: (resetVideoState?: () => void) => Promise<boolean>
  clearVideoFile: () => void
  setVideoFile: (url: string, fileName: string, filePath?: string) => void
  restoreVideoFile: (filePath: string, fileName: string) => Promise<boolean>
  isLocalFile: boolean
  originalFilePath?: string
}

export function useFileUpload(): UseFileUploadReturn {
  const [state, setState] = useState<VideoFileState>({
    videoFile: null,
    videoFileName: ''
  })

  const [originalFilePath, setOriginalFilePath] = useState<string | undefined>()
  const [isLocalFile, setIsLocalFile] = useState(false)

  // ÈÄöËøáÊñá‰ª∂ÂØπËØùÊ°ÜÈÄâÊã©ËßÜÈ¢ëÊñá‰ª∂
  const handleVideoFileSelect = useCallback(
    async (resetVideoState?: () => void): Promise<boolean> => {
      try {
        const filePaths = await FileSystemHelper.openFileDialog({
          title: 'ÈÄâÊã©ËßÜÈ¢ëÊñá‰ª∂',
          filters: [
            {
              name: 'ËßÜÈ¢ëÊñá‰ª∂',
              extensions: ['mp4', 'avi', 'mov', 'mkv', 'webm', 'ogg', 'm4v', 'flv', 'wmv']
            },
            {
              name: 'ÊâÄÊúâÊñá‰ª∂',
              extensions: ['*']
            }
          ],
          properties: ['openFile']
        })

        if (!filePaths || filePaths.length === 0) {
          return false
        }

        const filePath = filePaths[0]

        // È™åËØÅÊñá‰ª∂Ê†ºÂºè
        if (!FileSystemHelper.isSupportedVideoFormat(filePath)) {
          message.error('‰∏çÊîØÊåÅÁöÑËßÜÈ¢ëÊ†ºÂºèÔºåËØ∑ÈÄâÊã©ÊîØÊåÅÁöÑËßÜÈ¢ëÊñá‰ª∂')
          return false
        }

        // Ëé∑ÂèñÊñá‰ª∂ URL
        const fileUrl = await FileSystemHelper.getVideoFileUrl(filePath)
        if (!fileUrl) {
          message.error('Êó†Ê≥ïËÆøÈóÆÈÄâÊã©ÁöÑËßÜÈ¢ëÊñá‰ª∂ÔºåËØ∑Ê£ÄÊü•Êñá‰ª∂Ë∑ØÂæÑÂíåÊùÉÈôê')
          return false
        }

        // È™åËØÅÁîüÊàêÁöÑ URL Ê†ºÂºè
        console.log('ÁîüÊàêÁöÑËßÜÈ¢ëÊñá‰ª∂URL:', fileUrl)

        // Ê£ÄÊü•Êñá‰ª∂‰ø°ÊÅØ
        const fileInfo = await FileSystemHelper.getFileInfo(filePath)
        if (fileInfo) {
          console.log('ËßÜÈ¢ëÊñá‰ª∂‰ø°ÊÅØ:', {
            size: `${(fileInfo.size / 1024 / 1024).toFixed(2)} MB`,
            isFile: fileInfo.isFile,
            lastModified: new Date(fileInfo.mtime).toLocaleString()
          })
        }

        // Âú®ËÆæÁΩÆÊñ∞ËßÜÈ¢ëÊñá‰ª∂‰πãÂâçÔºåÂÖàÈáçÁΩÆËßÜÈ¢ëÊí≠ÊîæÂô®Áä∂ÊÄÅ
        if (resetVideoState) {
          console.log('üîÑ ÈáçÁΩÆËßÜÈ¢ëÊí≠ÊîæÂô®Áä∂ÊÄÅ...')
          resetVideoState()
        }

        // Ê∏ÖÁêÜ‰πãÂâçÁöÑ URL
        cleanupBlobUrl(state.videoFile)

        const fileName = FileSystemHelper.getFileName(filePath)

        // Ê£ÄÊü•ËßÜÈ¢ëÂÖºÂÆπÊÄß
        const { printCompatibilityReport, supportsH265 } = await import(
          '../utils/videoCompatibility'
        )
        printCompatibilityReport()

        // Â¶ÇÊûúÊòØ H.265 ËßÜÈ¢ë‰ΩÜ‰∏çÊîØÊåÅÔºåÁªôÂá∫Ë≠¶Âëä
        if (fileName.toLowerCase().includes('hevc') || fileName.toLowerCase().includes('h265')) {
          if (!supportsH265()) {
            console.warn('‚ö†Ô∏è Ê£ÄÊµãÂà∞ H.265 ËßÜÈ¢ëÊñá‰ª∂Ôºå‰ΩÜÂΩìÂâçÁéØÂ¢ÉÂèØËÉΩ‰∏çÊîØÊåÅ H.265 Ëß£Á†Å')
            message.warning('Ê£ÄÊµãÂà∞ H.265 ËßÜÈ¢ëÊñá‰ª∂ÔºåÂ¶ÇÊûúÊí≠ÊîæÂ§±Ë¥•ÔºåÂª∫ËÆÆËΩ¨Êç¢‰∏∫ H.264 Ê†ºÂºè')
          }
        }

        setState({
          videoFile: fileUrl,
          videoFileName: fileName
        })

        setOriginalFilePath(filePath)
        setIsLocalFile(true)

        console.log('‚úÖ ÈÄöËøáÊñá‰ª∂ÂØπËØùÊ°ÜÈÄâÊã©ËßÜÈ¢ëÊñá‰ª∂:', {
          filePath,
          fileName,
          fileUrl
        })

        message.success(`ËßÜÈ¢ëÊñá‰ª∂ ${fileName} Â∑≤Âä†ËΩΩ`)
        return true
      } catch (error) {
        console.error('ÈÄâÊã©ËßÜÈ¢ëÊñá‰ª∂Â§±Ë¥•:', error)
        message.error('ÈÄâÊã©ËßÜÈ¢ëÊñá‰ª∂Â§±Ë¥•')
        return false
      }
    },
    [state.videoFile]
  )

  // ËßÜÈ¢ëÊñá‰ª∂‰∏ä‰º†Â§ÑÁêÜÔºàÊãñÊãΩÊàñÈÄâÊã©Êñá‰ª∂Ôºâ
  const handleVideoUpload = useCallback(
    (file: File, resetVideoState?: () => void): boolean => {
      // Ê£ÄÊü•Êñá‰ª∂Á±ªÂûã
      if (!isValidVideoFile(file)) {
        message.error('‰∏çÊîØÊåÅÁöÑËßÜÈ¢ëÊ†ºÂºèÔºåËØ∑ÈÄâÊã© MP4„ÄÅAVI„ÄÅMOV„ÄÅMKV„ÄÅWebM Êàñ OGG Ê†ºÂºèÁöÑËßÜÈ¢ëÊñá‰ª∂')
        return false
      }

      // Âú®ËÆæÁΩÆÊñ∞ËßÜÈ¢ëÊñá‰ª∂‰πãÂâçÔºåÂÖàÈáçÁΩÆËßÜÈ¢ëÊí≠ÊîæÂô®Áä∂ÊÄÅ
      if (resetVideoState) {
        console.log('üîÑ ÈáçÁΩÆËßÜÈ¢ëÊí≠ÊîæÂô®Áä∂ÊÄÅ...')
        resetVideoState()
      }

      // Ê∏ÖÁêÜ‰πãÂâçÁöÑ URL
      cleanupBlobUrl(state.videoFile)

      // ÂàõÂª∫Êñ∞ÁöÑ blob URL
      const url = URL.createObjectURL(file)
      console.log('Created blob URL:', url)
      console.log('File info:', {
        name: file.name,
        type: file.type,
        size: file.size,
        lastModified: file.lastModified
      })

      setState({
        videoFile: url,
        videoFileName: file.name
      })

      setOriginalFilePath(undefined)
      setIsLocalFile(false)

      message.success(`ËßÜÈ¢ëÊñá‰ª∂ ${file.name} Â∑≤Âä†ËΩΩ`)
      return true
    },
    [state.videoFile]
  )

  // Ê∏ÖÈô§ËßÜÈ¢ëÊñá‰ª∂
  const clearVideoFile = useCallback((): void => {
    cleanupBlobUrl(state.videoFile)
    setState({
      videoFile: null,
      videoFileName: ''
    })
    setOriginalFilePath(undefined)
    setIsLocalFile(false)
  }, [state.videoFile])

  // ËÆæÁΩÆËßÜÈ¢ëÊñá‰ª∂ÔºàÁî®‰∫éÈ°πÁõÆÊÅ¢Â§çÔºâ
  const setVideoFile = useCallback((url: string, fileName: string, filePath?: string): void => {
    setState({
      videoFile: url,
      videoFileName: fileName
    })

    setOriginalFilePath(filePath)
    setIsLocalFile(!!filePath && !url.startsWith('blob:'))
  }, [])

  // ÊÅ¢Â§çËßÜÈ¢ëÊñá‰ª∂ÔºàÁî®‰∫éÈ°πÁõÆÊÅ¢Â§çÔºâ
  const restoreVideoFile = useCallback(
    async (filePath: string, fileName: string): Promise<boolean> => {
      try {
        console.log('üîÑ Â∞ùËØïÊÅ¢Â§çËßÜÈ¢ëÊñá‰ª∂:', { filePath, fileName })

        // Ê£ÄÊü•Êñá‰ª∂ÊòØÂê¶Â≠òÂú®
        const exists = await FileSystemHelper.checkFileExists(filePath)
        if (!exists) {
          console.warn('‚ö†Ô∏è ËßÜÈ¢ëÊñá‰ª∂‰∏çÂ≠òÂú®:', filePath)
          return false
        }

        // Ëé∑ÂèñÊñá‰ª∂ URL
        const fileUrl = await FileSystemHelper.getVideoFileUrl(filePath)
        if (!fileUrl) {
          console.warn('‚ö†Ô∏è Êó†Ê≥ïËé∑ÂèñËßÜÈ¢ëÊñá‰ª∂ URL:', filePath)
          return false
        }

        // Ê∏ÖÁêÜ‰πãÂâçÁöÑ URL
        cleanupBlobUrl(state.videoFile)

        setState({
          videoFile: fileUrl,
          videoFileName: fileName
        })

        setOriginalFilePath(filePath)
        setIsLocalFile(true)

        console.log('‚úÖ ÊàêÂäüÊÅ¢Â§çËßÜÈ¢ëÊñá‰ª∂:', {
          filePath,
          fileName,
          fileUrl
        })

        return true
      } catch (error) {
        console.error('ÊÅ¢Â§çËßÜÈ¢ëÊñá‰ª∂Â§±Ë¥•:', error)
        return false
      }
    },
    [state.videoFile]
  )

  // ÁªÑ‰ª∂Âç∏ËΩΩÊó∂Ê∏ÖÁêÜ URL
  useEffect(() => {
    return (): void => {
      cleanupBlobUrl(state.videoFile)
    }
  }, [state.videoFile])

  return {
    ...state,
    handleVideoUpload,
    handleVideoFileSelect,
    clearVideoFile,
    setVideoFile,
    restoreVideoFile,
    isLocalFile,
    originalFilePath
  }
}
