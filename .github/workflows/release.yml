name: Release

run-name: 🚀 Release ${{ github.event.inputs.version || format('v{0}', github.run_number) }} ${{ github.ref_name != 'main' && format('({0})', github.ref_name) || '' }}

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0, v1.0.0-beta.1, v1.0.0-alpha.1)'
        required: false

permissions:
  contents: write
  pull-requests: read

jobs:
  detect-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      version_type: ${{ steps.version.outputs.version_type }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
      upload_path: ${{ steps.version.outputs.upload_path }}
      autoupdate_path: ${{ steps.version.outputs.autoupdate_path }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect version and type
        id: version
        shell: bash
        run: |
          # Get version from input, tag, or package.json
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [ -n "${{ github.ref_name }}" ] && [[ "${{ github.ref_name }}" == v* ]]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION="v$(node -p "require('./package.json').version")"
          fi

          # Remove 'v' prefix for processing
          VERSION_NO_V="${VERSION#v}"

          if [[ "${{ github.ref_name }}" == "main" ]]; then
            # main 分支 = stable
            VERSION_TYPE="stable"
          elif [[ "${{ github.ref_name }}" == "beta" ]]; then
            # beta 分支 = beta
            VERSION_TYPE="beta"
          elif [[ "${{ github.ref_name }}" == "alpha" ]]; then
            # alpha 分支 = alpha
            VERSION_TYPE="alpha"
          elif [[ "$VERSION_NO_V" == *"-dev"* ]]; then
            # 版本号包含 dev 后缀
            VERSION_TYPE="dev"
          elif [[ "$VERSION_NO_V" == *"-test"* ]]; then
            # 版本号包含 test 后缀
            VERSION_TYPE="test"
          elif [[ "$VERSION_NO_V" == *"-alpha"* ]]; then
            # 版本号包含 alpha 后缀
            VERSION_TYPE="alpha"
          elif [[ "$VERSION_NO_V" == *"-beta"* ]]; then
            # 版本号包含 beta 后缀
            VERSION_TYPE="beta"
          else
            # 默认为 stable
            VERSION_TYPE="stable"
          fi

          # Determine if it's a prerelease
          if [[ "$VERSION_TYPE" != "stable" ]]; then
            IS_PRERELEASE="true"
          else
            IS_PRERELEASE="false"
          fi

          # Set upload paths based on version type
          case "$VERSION_TYPE" in
            "dev"|"test")
              UPLOAD_PATH="/test-releases/"
              AUTOUPDATE_PATH="/test-autoupdate/"
              ;;
            "alpha"|"beta")
              UPLOAD_PATH="/prerelease/"
              AUTOUPDATE_PATH="/prerelease-autoupdate/"
              ;;
            "stable")
              UPLOAD_PATH="/releases/"
              AUTOUPDATE_PATH="/autoupdate/"
              ;;
          esac

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "upload_path=$UPLOAD_PATH" >> $GITHUB_OUTPUT
          echo "autoupdate_path=$AUTOUPDATE_PATH" >> $GITHUB_OUTPUT

          echo "🏷️ Version: $VERSION"
          echo "📦 Version Type: $VERSION_TYPE"
          echo "🚀 Is Prerelease: $IS_PRERELEASE"
          echo "📁 Upload Path: $UPLOAD_PATH"
          echo "🔄 AutoUpdate Path: $AUTOUPDATE_PATH"

  release:
    needs: detect-version
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows builds - 支持 x64 和 ARM64 架构
          - os: windows-latest
            platform: win
            target: --win
          # macOS builds - 支持 Intel 和 Apple Silicon 架构
          - os: macos-latest
            platform: mac
            target: --mac
          # Linux builds - 支持 x64 和 ARM64 架构
          - os: ubuntu-latest
            platform: linux
            target: --linux

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Sync version from detect-version job
        shell: bash
        run: |
          echo "🔄 同步版本号到 package.json"
          echo "Current package.json version: $(node -p "require('./package.json').version")"
          echo "Target version from detect-version: ${{ needs.detect-version.outputs.version }}"

          # 从版本号中移除 'v' 前缀（如果存在）
          TARGET_VERSION="${{ needs.detect-version.outputs.version }}"
          VERSION_NO_V="${TARGET_VERSION#v}"

          # 使用 node 脚本更新 package.json 中的版本号
          node -e "
            const fs = require('fs');
            const package = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            package.version = '${VERSION_NO_V}';
            fs.writeFileSync('package.json', JSON.stringify(package, null, 2) + '\n');
            console.log('✅ Updated package.json version to:', package.version);
          "

          echo "Updated package.json version: $(node -p "require('./package.json').version")"

      - name: Build for ${{ matrix.platform }}
        shell: bash
        run: |
          echo "🏗️ Building for ${{ matrix.platform }}"
          echo "构建平台: ${{ matrix.platform }}"
          echo "📦 版本类型: ${{ needs.detect-version.outputs.version_type }}"
          echo "🔄 更新渠道: ${{ needs.detect-version.outputs.version_type == 'stable' && 'latest' || needs.detect-version.outputs.version_type }}"
          pnpm build

          # 构建产物但不发布，交给 semantic-release 统一发布
          echo "🏗️ Building artifacts without publishing"
          echo "📦 Semantic-release will handle the GitHub Release creation"
          pnpm exec electron-builder ${{ matrix.target }} --publish never
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          # 根据版本类型设置更新渠道，stable 版本使用 latest，其他版本使用对应类型名称
          ELECTRON_BUILDER_CHANNEL: ${{ needs.detect-version.outputs.version_type == 'stable' && 'latest' || needs.detect-version.outputs.version_type }}

      - name: List build artifacts
        shell: bash
        run: |
          echo "📦 Build artifacts in dist directory:"
          if [ -d "dist" ]; then
            if command -v ls >/dev/null 2>&1; then
              ls -la dist/
            else
              # Windows fallback
              dir dist /a
            fi
          else
            echo "No dist directory found"
          fi
          echo "📁 Current directory contents:"
          if command -v ls >/dev/null 2>&1; then
            ls -la
          else
            # Windows fallback
            dir /a
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-artifacts
          path: |
            dist/*.exe
            dist/*.dmg
            dist/*.zip
            dist/*.AppImage
            dist/*.deb
            dist/*.yml
            dist/*.yaml
            dist/*.blockmap
          retention-days: 30
          if-no-files-found: warn

  semantic-release:
    needs: [detect-version, release]
    runs-on: ubuntu-latest
    if: needs.detect-version.outputs.version_type != 'dev' && needs.detect-version.outputs.version_type != 'test'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # semantic-release 需要完整的 git 历史

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare artifacts for release
        run: |
          echo "📦 Preparing artifacts for GitHub Release"
          mkdir -p dist
          # 复制所有构建产物到 dist 目录
          find artifacts -name "*.exe" -o -name "*.dmg" -o -name "*.zip" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.yml" -o -name "*.yaml" -o -name "*.blockmap" | while read file; do
            cp "$file" dist/
            echo "📁 Copied: $(basename "$file")"
          done
          ls -la dist/

      - name: Run Semantic Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: pnpm semantic-release

  notify:
    needs: [detect-version, release]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Build Status Summary
        run: |
          echo "🏗️ Build Summary"
          echo "==============="
          echo "Version: ${{ needs.detect-version.outputs.version }}"
          echo "Type: ${{ needs.detect-version.outputs.version_type }}"
          echo "Prerelease: ${{ needs.detect-version.outputs.is_prerelease }}"
          echo "Status: ${{ needs.release.result }}"
          echo "Trigger: ${{ github.event_name }}"
          echo ""

          if [ "${{ needs.release.result }}" == "success" ]; then
            if [ "${{ needs.detect-version.outputs.version_type }}" != "dev" ] && [ "${{ needs.detect-version.outputs.version_type }}" != "test" ]; then
              echo "🎉 GitHub Release created successfully!"
              echo "📍 Check: https://github.com/${{ github.repository }}/releases"
              echo ""
              if [ "${{ needs.detect-version.outputs.is_prerelease }}" == "true" ]; then
                echo "🧪 This is a prerelease version:"
                echo "- Alpha/Beta versions are marked as prerelease"
                echo "- Auto-update is enabled for prerelease users"
              else
                echo "🚀 This is a stable release"
              fi
            else
              echo "📦 Build completed but not published (dev/test version)"
            fi
          else
            echo "❌ Build failed - check logs for details"
          fi
