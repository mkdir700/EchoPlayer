name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0, v1.0.0-beta.1, v1.0.0-alpha.1)'
        required: false
      force_version_type:
        description: 'Force version type (overrides auto-detection)'
        required: false
        type: choice
        options:
          - 'dev'
          - 'test'
          - 'alpha'
          - 'beta'
          - 'stable'
      skip_tests:
        description: 'Skip tests for faster builds'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

permissions:
  contents: write
  pull-requests: read

jobs:
  detect-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      version_type: ${{ steps.version.outputs.version_type }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
      upload_path: ${{ steps.version.outputs.upload_path }}
      autoupdate_path: ${{ steps.version.outputs.autoupdate_path }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect version and type
        id: version
        shell: bash
        run: |
          # Get version from input, tag, or package.json
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [ -n "${{ github.ref_name }}" ] && [[ "${{ github.ref_name }}" == v* ]]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION="v$(node -p "require('./package.json').version")"
          fi

          # Remove 'v' prefix for processing
          VERSION_NO_V="${VERSION#v}"

          # Detect version type
          if [ -n "${{ github.event.inputs.force_version_type }}" ]; then
            VERSION_TYPE="${{ github.event.inputs.force_version_type }}"
          elif [[ "$VERSION_NO_V" == *"-dev"* ]]; then
            VERSION_TYPE="dev"
          elif [[ "$VERSION_NO_V" == *"-test"* ]]; then
            VERSION_TYPE="test"
          elif [[ "$VERSION_NO_V" == *"-alpha"* ]]; then
            VERSION_TYPE="alpha"
          elif [[ "$VERSION_NO_V" == *"-beta"* ]]; then
            VERSION_TYPE="beta"
          else
            VERSION_TYPE="stable"
          fi

          # Determine if it's a prerelease
          if [[ "$VERSION_TYPE" != "stable" ]]; then
            IS_PRERELEASE="true"
          else
            IS_PRERELEASE="false"
          fi

          # Set upload paths based on version type
          case "$VERSION_TYPE" in
            "dev"|"test")
              UPLOAD_PATH="/test-releases/"
              AUTOUPDATE_PATH="/test-autoupdate/"
              ;;
            "alpha"|"beta")
              UPLOAD_PATH="/prerelease/"
              AUTOUPDATE_PATH="/prerelease-autoupdate/"
              ;;
            "stable")
              UPLOAD_PATH="/releases/"
              AUTOUPDATE_PATH="/autoupdate/"
              ;;
          esac

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "upload_path=$UPLOAD_PATH" >> $GITHUB_OUTPUT
          echo "autoupdate_path=$AUTOUPDATE_PATH" >> $GITHUB_OUTPUT

          echo "üè∑Ô∏è Version: $VERSION"
          echo "üì¶ Version Type: $VERSION_TYPE"
          echo "üöÄ Is Prerelease: $IS_PRERELEASE"
          echo "üìÅ Upload Path: $UPLOAD_PATH"
          echo "üîÑ AutoUpdate Path: $AUTOUPDATE_PATH"

  release:
    needs: detect-version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: win
          - os: macos-latest
            platform: mac
          - os: ubuntu-latest
            platform: linux

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Setup Linux build environment
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3-dev libgconf-2-4 libxtst6 libxrandr2 libasound2-dev libpangocairo-1.0-0 libatk1.0-0 libcairo-gobject2 libgtk-3-0 libgdk-pixbuf2.0-0
          sudo snap install snapcraft --classic

      - name: Clean electron-builder cache
        if: matrix.platform == 'linux'
        run: |
          rm -rf ~/.cache/electron-builder
          rm -rf node_modules/.cache

      - name: Fix app-builder permissions
        if: matrix.platform == 'linux'
        run: |
          find node_modules -name "app-builder" -type f -exec chmod +x {} \;

      - name: Run tests
        if: github.event.inputs.skip_tests != 'true' && needs.detect-version.outputs.version_type != 'dev'
        run: pnpm test:run

      - name: Type check
        if: needs.detect-version.outputs.version_type != 'dev'
        run: pnpm typecheck

      - name: Lint check
        if: needs.detect-version.outputs.version_type == 'stable'
        run: pnpm lint

      - name: Build and release using electron-builder
        run: pnpm release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    needs: [detect-version, release]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Build Status Summary
        run: |
          echo "üèóÔ∏è Build Summary"
          echo "==============="
          echo "Version: ${{ needs.detect-version.outputs.version }}"
          echo "Type: ${{ needs.detect-version.outputs.version_type }}"
          echo "Prerelease: ${{ needs.detect-version.outputs.is_prerelease }}"
          echo "Status: ${{ job.status }}"

          if [ "${{ needs.detect-version.outputs.version_type }}" == "beta" ]; then
            echo ""
            echo "üß™ Beta Release Notes:"
            echo "- This is a beta version, please test thoroughly"
            echo "- Report any issues on GitHub"
            echo "- Auto-update is enabled for beta users"
          fi
