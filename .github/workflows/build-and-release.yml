name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
      is_test:
        description: 'Is this a test build?'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

permissions:
  contents: write
  pull-requests: read

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: win
          - os: macos-latest
            platform: mac
          - os: ubuntu-latest
            platform: linux

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set version variables
        shell: bash
        run: |
          if [ "${{ github.event.inputs.is_test }}" == "true" ]; then
            COMMIT_HASH=$(git rev-parse --short HEAD)
            if [ -n "${{ github.event.inputs.version }}" ]; then
              VERSION="${{ github.event.inputs.version }}-${COMMIT_HASH}"
            else
              VERSION="${{ github.ref_name }}-${COMMIT_HASH}"
            fi
          else
            if [ -n "${{ github.event.inputs.version }}" ]; then
              VERSION="${{ github.event.inputs.version }}"
            else
              VERSION="${{ github.ref_name }}"
            fi
          fi
          echo "BUILD_VERSION=${VERSION}" >> $GITHUB_ENV
          echo "IS_TEST=${{ github.event.inputs.is_test }}" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Run tests
        run: pnpm test:run

      - name: Type check
        run: pnpm typecheck

      - name: Build application
        run: pnpm build

      - name: Build packages
        run: |
          if [ "${{ matrix.platform }}" == "win" ]; then
            pnpm build:win
          elif [ "${{ matrix.platform }}" == "mac" ]; then
            pnpm build:mac
          else
            pnpm build:linux
          fi
        shell: bash

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: echolab-${{ matrix.platform }}-${{ env.BUILD_VERSION }}
          path: |
            dist/*.exe
            dist/*.dmg
            dist/*.AppImage
            dist/*.deb
            dist/*.snap
            dist/latest*.yml
          retention-days: 7

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
    # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**/*
          draft: true
          prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}

      - name: Upload to Tencent COS - Release Files
        uses: zkqiang/tencent-cos-action@v0.1.0
        with:
          args: upload -r ./artifacts/ ${{ env.IS_TEST == 'true' && '/test-releases/' || '/releases/' }}${{ env.BUILD_VERSION }}/
          secret_id: ${{ secrets.SECRET_ID }}
          secret_key: ${{ secrets.SECRET_KEY }}
          bucket: ${{ secrets.BUCKET }}
          region: ${{ secrets.REGION }}

      - name: Upload to Tencent COS - AutoUpdate Files
        uses: zkqiang/tencent-cos-action@v0.1.0
        with:
          args: upload ./artifacts/*/latest*.yml ${{ env.IS_TEST == 'true' && '/test-autoupdate/' || '/autoupdate/' }} && upload ./artifacts/*/*.exe ${{ env.IS_TEST == 'true' && '/test-autoupdate/' || '/autoupdate/' }} && upload ./artifacts/*/*.dmg ${{ env.IS_TEST == 'true' && '/test-autoupdate/' || '/autoupdate/' }} && upload ./artifacts/*/*.AppImage ${{ env.IS_TEST == 'true' && '/test-autoupdate/' || '/autoupdate/' }}
          secret_id: ${{ secrets.SECRET_ID }}
          secret_key: ${{ secrets.SECRET_KEY }}
          bucket: ${{ secrets.BUCKET }}
          region: ${{ secrets.REGION }}
