name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0, v1.0.0-beta.1, v1.0.0-alpha.1)'
        required: false
      force_version_type:
        description: 'Force version type (overrides auto-detection)'
        required: false
        type: choice
        options:
          - 'dev'
          - 'test'
          - 'alpha'
          - 'beta'
          - 'stable'
      skip_tests:
        description: 'Skip tests for faster builds'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

permissions:
  contents: write
  pull-requests: read

jobs:
  detect-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      version_type: ${{ steps.version.outputs.version_type }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
      upload_path: ${{ steps.version.outputs.upload_path }}
      autoupdate_path: ${{ steps.version.outputs.autoupdate_path }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect version and type
        id: version
        shell: bash
        run: |
          # Get version from input, tag, or package.json
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [ -n "${{ github.ref_name }}" ] && [[ "${{ github.ref_name }}" == v* ]]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION="v$(node -p "require('./package.json').version")"
          fi

          # Remove 'v' prefix for processing
          VERSION_NO_V="${VERSION#v}"

          # Detect version type
          if [ -n "${{ github.event.inputs.force_version_type }}" ]; then
            VERSION_TYPE="${{ github.event.inputs.force_version_type }}"
          elif [[ "$VERSION_NO_V" == *"-dev"* ]]; then
            VERSION_TYPE="dev"
          elif [[ "$VERSION_NO_V" == *"-test"* ]]; then
            VERSION_TYPE="test"
          elif [[ "$VERSION_NO_V" == *"-alpha"* ]]; then
            VERSION_TYPE="alpha"
          elif [[ "$VERSION_NO_V" == *"-beta"* ]]; then
            VERSION_TYPE="beta"
          else
            VERSION_TYPE="stable"
          fi

          # Determine if it's a prerelease
          if [[ "$VERSION_TYPE" != "stable" ]]; then
            IS_PRERELEASE="true"
          else
            IS_PRERELEASE="false"
          fi

          # Set upload paths based on version type
          case "$VERSION_TYPE" in
            "dev"|"test")
              UPLOAD_PATH="/test-releases/"
              AUTOUPDATE_PATH="/test-autoupdate/"
              ;;
            "alpha"|"beta")
              UPLOAD_PATH="/prerelease/"
              AUTOUPDATE_PATH="/prerelease-autoupdate/"
              ;;
            "stable")
              UPLOAD_PATH="/releases/"
              AUTOUPDATE_PATH="/autoupdate/"
              ;;
          esac

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "upload_path=$UPLOAD_PATH" >> $GITHUB_OUTPUT
          echo "autoupdate_path=$AUTOUPDATE_PATH" >> $GITHUB_OUTPUT

          echo "🏷️ Version: $VERSION"
          echo "📦 Version Type: $VERSION_TYPE"
          echo "🚀 Is Prerelease: $IS_PRERELEASE"
          echo "📁 Upload Path: $UPLOAD_PATH"
          echo "🔄 AutoUpdate Path: $AUTOUPDATE_PATH"

  build:
    needs: detect-version
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: win
          - os: macos-latest
            platform: mac
          - os: ubuntu-latest
            platform: linux

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Run tests
        if: github.event.inputs.skip_tests != 'true' && needs.detect-version.outputs.version_type != 'dev'
        run: pnpm test:run

      - name: Type check
        if: needs.detect-version.outputs.version_type != 'dev'
        run: pnpm typecheck

      - name: Lint check
        if: needs.detect-version.outputs.version_type == 'stable'
        run: pnpm lint

      - name: Build application
        run: pnpm build

      - name: Build packages
        run: |
          if [ "${{ matrix.platform }}" == "win" ]; then
            pnpm build:win
          elif [ "${{ matrix.platform }}" == "mac" ]; then
            pnpm build:mac
          else
            pnpm build:linux
          fi
        shell: bash

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: echolab-${{ matrix.platform }}-${{ needs.detect-version.outputs.version }}
          path: |
            dist/*.exe
            dist/*.dmg
            dist/*.AppImage
            dist/*.deb
            dist/*.snap
            dist/latest*.yml
          retention-days: ${{ needs.detect-version.outputs.version_type == 'stable' && 30 || 7 }}

  # upload-windows:
  #   needs: [detect-version, build]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Download Windows artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: echolab-win-${{ needs.detect-version.outputs.version }}
  #         path: artifacts/echolab-win-${{ needs.detect-version.outputs.version }}

  #     - name: Upload to Tencent COS - Release Files (Windows)
  #       uses: zkqiang/tencent-cos-action@v0.1.0
  #       with:
  #         args: upload -r ./artifacts/echolab-win-${{ needs.detect-version.outputs.version }}/ ${{ needs.detect-version.outputs.upload_path }}${{ needs.detect-version.outputs.version }}/win/
  #         secret_id: ${{ secrets.SECRET_ID }}
  #         secret_key: ${{ secrets.SECRET_KEY }}
  #         bucket: ${{ secrets.BUCKET }}
  #         region: ${{ secrets.REGION }}

  #     - name: Upload to Tencent COS - AutoUpdate Config (Windows)
  #       uses: zkqiang/tencent-cos-action@v0.1.0
  #       with:
  #         args: upload ./artifacts/echolab-win-${{ needs.detect-version.outputs.version }}/latest.yml ${{ needs.detect-version.outputs.autoupdate_path }}
  #         secret_id: ${{ secrets.SECRET_ID }}
  #         secret_key: ${{ secrets.SECRET_KEY }}
  #         bucket: ${{ secrets.BUCKET }}
  #         region: ${{ secrets.REGION }}

  # upload-mac:
  #   needs: [detect-version, build]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Download Mac artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: echolab-mac-${{ needs.detect-version.outputs.version }}
  #         path: artifacts/echolab-mac-${{ needs.detect-version.outputs.version }}

  #     - name: Upload to Tencent COS - Release Files (Mac)
  #       uses: zkqiang/tencent-cos-action@v0.1.0
  #       with:
  #         args: upload -r ./artifacts/echolab-mac-${{ needs.detect-version.outputs.version }}/ ${{ needs.detect-version.outputs.upload_path }}${{ needs.detect-version.outputs.version }}/mac/
  #         secret_id: ${{ secrets.SECRET_ID }}
  #         secret_key: ${{ secrets.SECRET_KEY }}
  #         bucket: ${{ secrets.BUCKET }}
  #         region: ${{ secrets.REGION }}

  #     - name: Upload to Tencent COS - AutoUpdate Config (Mac)
  #       uses: zkqiang/tencent-cos-action@v0.1.0
  #       with:
  #         args: upload ./artifacts/echolab-mac-${{ needs.detect-version.outputs.version }}/latest-mac.yml ${{ needs.detect-version.outputs.autoupdate_path }}
  #         secret_id: ${{ secrets.SECRET_ID }}
  #         secret_key: ${{ secrets.SECRET_KEY }}
  #         bucket: ${{ secrets.BUCKET }}
  #         region: ${{ secrets.REGION }}

  # upload-linux:
  #   needs: [detect-version, build]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Download Linux artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: echolab-linux-${{ needs.detect-version.outputs.version }}
  #         path: artifacts/echolab-linux-${{ needs.detect-version.outputs.version }}

  #     - name: Upload to Tencent COS - Release Files (Linux)
  #       uses: zkqiang/tencent-cos-action@v0.1.0
  #       with:
  #         args: upload -r ./artifacts/echolab-linux-${{ needs.detect-version.outputs.version }}/ ${{ needs.detect-version.outputs.upload_path }}${{ needs.detect-version.outputs.version }}/linux/
  #         secret_id: ${{ secrets.SECRET_ID }}
  #         secret_key: ${{ secrets.SECRET_KEY }}
  #         bucket: ${{ secrets.BUCKET }}
  #         region: ${{ secrets.REGION }}

  #     - name: Upload to Tencent COS - AutoUpdate Config (Linux)
  #       uses: zkqiang/tencent-cos-action@v0.1.0
  #       with:
  #         args: upload ./artifacts/echolab-linux-${{ needs.detect-version.outputs.version }}/latest-linux.yml ${{ needs.detect-version.outputs.autoupdate_path }}
  #         secret_id: ${{ secrets.SECRET_ID }}
  #         secret_key: ${{ secrets.SECRET_KEY }}
  #         bucket: ${{ secrets.BUCKET }}
  #         region: ${{ secrets.REGION }}

  release:
    needs: [detect-version, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.detect-version.outputs.version }}
          name: ${{ needs.detect-version.outputs.version_type == 'stable' && format('Release {0}', needs.detect-version.outputs.version) || format('{0} Release {1}', needs.detect-version.outputs.version_type, needs.detect-version.outputs.version) }}
          files: |
            artifacts/**/*
          draft: true
          prerelease: ${{ needs.detect-version.outputs.is_prerelease == 'true' }}
          generate_release_notes: true
          body: |
            ## 📦 Version Type: ${{ needs.detect-version.outputs.version_type }}

            ${{ needs.detect-version.outputs.version_type == 'stable' && '🎉 This is a stable release.' || '' }}
            ${{ needs.detect-version.outputs.version_type == 'beta' && '🧪 This is a beta release. Please test thoroughly before using in production.' || '' }}
            ${{ needs.detect-version.outputs.version_type == 'alpha' && '⚠️ This is an alpha release. Expect bugs and breaking changes.' || '' }}
            ${{ needs.detect-version.outputs.version_type == 'test' && '🔧 This is a test build for internal testing only.' || '' }}
            ${{ needs.detect-version.outputs.version_type == 'dev' && '🚧 This is a development build. Not recommended for production use.' || '' }}

            ### 📥 Download

            - **Windows**: `echolab-win-${{ needs.detect-version.outputs.version }}`
            - **macOS**: `echolab-mac-${{ needs.detect-version.outputs.version }}`  
            - **Linux**: `echolab-linux-${{ needs.detect-version.outputs.version }}`

            ### 🔄 Auto Update

            Auto-update is available for this ${{ needs.detect-version.outputs.version_type }} release.
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}

  notify:
    needs: [detect-version, release]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Build Status Summary
        run: |
          echo "🏗️ Build Summary"
          echo "==============="
          echo "Version: ${{ needs.detect-version.outputs.version }}"
          echo "Type: ${{ needs.detect-version.outputs.version_type }}"
          echo "Prerelease: ${{ needs.detect-version.outputs.is_prerelease }}"
          echo "Status: ${{ job.status }}"

          if [ "${{ needs.detect-version.outputs.version_type }}" == "beta" ]; then
            echo ""
            echo "🧪 Beta Release Notes:"
            echo "- This is a beta version, please test thoroughly"
            echo "- Report any issues on GitHub"
            echo "- Auto-update is enabled for beta users"
          fi
